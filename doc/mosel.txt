*mosel.txt*  Plugin for developing Mosel scripts in Vim.

Author: Sebastien Lannez <sebastien.lannez@gmail.com>
Last Change: September 12, 2013

This plugin is licensed under the terms of the BSD license. Please see
mosel.vim for the license in its entirety.


==============================================================================
Mosel                                       *mosel*

1. Introduction                             |mosel-intro|
2. Commands                                 |mosel-commands|
3. Functions                                |mosel-functions|


For Vim version 7.0 or later.
This plugin only works if 'compatible' is not set.
{Vi does not have any of these features.}

==============================================================================
1. Introduction                             *mosel-intro*

Mosel is a language for mathematical programming.
My .vimrc addendum to properly work with VIM:
--- begin of code snippet -------------------
>
	"
	" My Mosel configuration
	"
	au Bufenter *.mos compiler mosel
	let g:xml_syntax_folding = 1
	" Enable context aware completion
	let g:SuperTabDefaultCompletionType = "context"
	" No completion after spaces, comma, minus...
	let g:SuperTabNoCompleteAfter = [',', '\s', '-', '+']
	" Show mosel functions
	let mosel_functions = 1
	" Fold using syntax
	set foldmethod=syntax

--- end of code snippet ----------------------

==============================================================================
2. Commands                                 *mosel-commands*

2.1 Mosel commands

<F5>  Compile the model in the current buffer
<F6>  Execute the model in the current buffer
<F7>  Profile the execution of the model in the current buffer
<F8>  List the symbols with Mosel examine

m<F8> List of public declarations (procedure and function) to QuickFix

]]    Jump to next procedure or function
]]    Jump to previous procedure or function
2.2 Versioning commands
<F9> Git update
<F10> Git commit

<s-space> SnipMate forward expansion
<c-space> SnipMate backward expansion
<esc><space><space> List available snippets
    
2.2 Features

Word autocompletion can be done by pressing <tab> key. A
list of non word will then display.

Code snippets are automatically inserted after pressing <space> (also
soo <s-space>).
<c-r> gives a list of code snippets.

==============================================================================
3. Functions                               *mosel-functions*

3.1 MoselDeclaration
This routine will extract a list of the signature of all procedure and 
function that are declared public.
The list is available in a newly created buffer and automatically yanked to
the unnamed register.

In the buffer containing the Mosel source code: >
	:MoselDeclaration

Then just paste with P or :"+gP
  

3.2 MoselFromAmpl
This routine will copy the current buffer to a new one, and apply a list of
rules to convert AMPL syntax to Mosel.

In the buffer containing the Mosel source code: >
	:MoselFromAmpl

Then edit the buffer.

==============================================================================
 vim:tw=78:ts=8:ft=help:norl:

